/**
 */
package teaw.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import teaw.util.TeawAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class TeawItemProviderAdapterFactory extends TeawAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public TeawItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link teaw.TEAWDiagram} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TEAWDiagramItemProvider teawDiagramItemProvider;

	/**
	 * This creates an adapter for a {@link teaw.TEAWDiagram}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTEAWDiagramAdapter() {
		if (teawDiagramItemProvider == null) {
			teawDiagramItemProvider = new TEAWDiagramItemProvider(this);
		}

		return teawDiagramItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link teaw.Emotions} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EmotionsItemProvider emotionsItemProvider;

	/**
	 * This creates an adapter for a {@link teaw.Emotions}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEmotionsAdapter() {
		if (emotionsItemProvider == null) {
			emotionsItemProvider = new EmotionsItemProvider(this);
		}

		return emotionsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link teaw.Planning} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlanningItemProvider planningItemProvider;

	/**
	 * This creates an adapter for a {@link teaw.Planning}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlanningAdapter() {
		if (planningItemProvider == null) {
			planningItemProvider = new PlanningItemProvider(this);
		}

		return planningItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link teaw.Picto} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PictoItemProvider pictoItemProvider;

	/**
	 * This creates an adapter for a {@link teaw.Picto}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPictoAdapter() {
		if (pictoItemProvider == null) {
			pictoItemProvider = new PictoItemProvider(this);
		}

		return pictoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link teaw.Person} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PersonItemProvider personItemProvider;

	/**
	 * This creates an adapter for a {@link teaw.Person}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPersonAdapter() {
		if (personItemProvider == null) {
			personItemProvider = new PersonItemProvider(this);
		}

		return personItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link teaw.Action} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActionItemProvider actionItemProvider;

	/**
	 * This creates an adapter for a {@link teaw.Action}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActionAdapter() {
		if (actionItemProvider == null) {
			actionItemProvider = new ActionItemProvider(this);
		}

		return actionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link teaw.Place} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlaceItemProvider placeItemProvider;

	/**
	 * This creates an adapter for a {@link teaw.Place}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlaceAdapter() {
		if (placeItemProvider == null) {
			placeItemProvider = new PlaceItemProvider(this);
		}

		return placeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link teaw.Transiction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransictionItemProvider transictionItemProvider;

	/**
	 * This creates an adapter for a {@link teaw.Transiction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransictionAdapter() {
		if (transictionItemProvider == null) {
			transictionItemProvider = new TransictionItemProvider(this);
		}

		return transictionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link teaw.WaitTime} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WaitTimeItemProvider waitTimeItemProvider;

	/**
	 * This creates an adapter for a {@link teaw.WaitTime}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWaitTimeAdapter() {
		if (waitTimeItemProvider == null) {
			waitTimeItemProvider = new WaitTimeItemProvider(this);
		}

		return waitTimeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link teaw.Prize} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrizeItemProvider prizeItemProvider;

	/**
	 * This creates an adapter for a {@link teaw.Prize}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrizeAdapter() {
		if (prizeItemProvider == null) {
			prizeItemProvider = new PrizeItemProvider(this);
		}

		return prizeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link teaw.SocialStory} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SocialStoryItemProvider socialStoryItemProvider;

	/**
	 * This creates an adapter for a {@link teaw.SocialStory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSocialStoryAdapter() {
		if (socialStoryItemProvider == null) {
			socialStoryItemProvider = new SocialStoryItemProvider(this);
		}

		return socialStoryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link teaw.SoothingObject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SoothingObjectItemProvider soothingObjectItemProvider;

	/**
	 * This creates an adapter for a {@link teaw.SoothingObject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSoothingObjectAdapter() {
		if (soothingObjectItemProvider == null) {
			soothingObjectItemProvider = new SoothingObjectItemProvider(this);
		}

		return soothingObjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link teaw.EmotionChoice} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EmotionChoiceItemProvider emotionChoiceItemProvider;

	/**
	 * This creates an adapter for a {@link teaw.EmotionChoice}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEmotionChoiceAdapter() {
		if (emotionChoiceItemProvider == null) {
			emotionChoiceItemProvider = new EmotionChoiceItemProvider(this);
		}

		return emotionChoiceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link teaw.Emotion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EmotionItemProvider emotionItemProvider;

	/**
	 * This creates an adapter for a {@link teaw.Emotion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEmotionAdapter() {
		if (emotionItemProvider == null) {
			emotionItemProvider = new EmotionItemProvider(this);
		}

		return emotionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link teaw.CommunicationBook} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CommunicationBookItemProvider communicationBookItemProvider;

	/**
	 * This creates an adapter for a {@link teaw.CommunicationBook}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCommunicationBookAdapter() {
		if (communicationBookItemProvider == null) {
			communicationBookItemProvider = new CommunicationBookItemProvider(this);
		}

		return communicationBookItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link teaw.NormalLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NormalLinkItemProvider normalLinkItemProvider;

	/**
	 * This creates an adapter for a {@link teaw.NormalLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNormalLinkAdapter() {
		if (normalLinkItemProvider == null) {
			normalLinkItemProvider = new NormalLinkItemProvider(this);
		}

		return normalLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link teaw.RedLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RedLinkItemProvider redLinkItemProvider;

	/**
	 * This creates an adapter for a {@link teaw.RedLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRedLinkAdapter() {
		if (redLinkItemProvider == null) {
			redLinkItemProvider = new RedLinkItemProvider(this);
		}

		return redLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link teaw.GreenLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GreenLinkItemProvider greenLinkItemProvider;

	/**
	 * This creates an adapter for a {@link teaw.GreenLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGreenLinkAdapter() {
		if (greenLinkItemProvider == null) {
			greenLinkItemProvider = new GreenLinkItemProvider(this);
		}

		return greenLinkItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (teawDiagramItemProvider != null) teawDiagramItemProvider.dispose();
		if (emotionsItemProvider != null) emotionsItemProvider.dispose();
		if (planningItemProvider != null) planningItemProvider.dispose();
		if (pictoItemProvider != null) pictoItemProvider.dispose();
		if (personItemProvider != null) personItemProvider.dispose();
		if (actionItemProvider != null) actionItemProvider.dispose();
		if (placeItemProvider != null) placeItemProvider.dispose();
		if (transictionItemProvider != null) transictionItemProvider.dispose();
		if (waitTimeItemProvider != null) waitTimeItemProvider.dispose();
		if (prizeItemProvider != null) prizeItemProvider.dispose();
		if (socialStoryItemProvider != null) socialStoryItemProvider.dispose();
		if (soothingObjectItemProvider != null) soothingObjectItemProvider.dispose();
		if (emotionChoiceItemProvider != null) emotionChoiceItemProvider.dispose();
		if (emotionItemProvider != null) emotionItemProvider.dispose();
		if (communicationBookItemProvider != null) communicationBookItemProvider.dispose();
		if (normalLinkItemProvider != null) normalLinkItemProvider.dispose();
		if (redLinkItemProvider != null) redLinkItemProvider.dispose();
		if (greenLinkItemProvider != null) greenLinkItemProvider.dispose();
	}

}
