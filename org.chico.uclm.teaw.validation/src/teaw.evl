// Plannification diagram
context Planning {
	
	constraint NodesSize {
		check {
    		var n = PlanningNode.all.size();
    		return n < 10;
    	} 
    	message : "You can specify a maximum of 10 elements"
	}

}

context PlanningNode {

  	critique HasOrder {
    	check : self.order != Order#None
    	message : "The order must be specified"
  	}
  	
  	constraint HasImage {
    	check : self.imagePath != null
    	message : "The image path must be specified"
  	}

}


// Emotions diagram
context EmotionsPicto {

  	constraint HasImage {
    	check : self.imagePath != null
    	message : "The image path must be specified"
  	}

}

context Emotions {

	constraint OnlyOneGreenLink {
    	check {
    		var n = GreenLink.all.size();
    		return n <= 1;
    	} 
    	message : "You must specify only one correct link"
    	fix {
			title : 'Remove duplicated correct link'
			do {
				delete self;
			}
		}
  	}

}

// Links
context GreenLink {

	//critique notEmptyFeedback {
    //	check : self.Feedback.isDefined()
    //	message : "Test GREEN"
  	//}


  	constraint HasNegativeFeedback {
    	check : self.Feedback.isDefined() and self.EGL_Tool.isKindOf(PositiveFeedback)
    	message : "The correct solution can't have a negative feedback"
  	}

}

context RedLink {

	//critique notEmptyFeedback {
    //	check : self.Feedback.isDefined()
    //	message : "Test RED"
  	//}

  	constraint HasPositiveFeedback {
    	check : self.Feedback.isDefined() and self.EGL_Tool.isKindOf(NegativeFeedback)
    	message : "The incorrect solution can't have a positive feedback"
  	}

}
